# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

################################################################################
#
# Declare any of the below variables in your own [gcode_macro _km_options] to
# to override the values here.
#
# DO NOT CHANGE ANYTHING IN THIS FILE!!!
#
# This file handles the initialization for all the macros, and difficult to
# diagnose errors will result from unexpected values or code changes.
#
################################################################################
[gcode_macro _km_globals]
# Set to False to hide the Octoprint LCD menus.
variable_menu_show_octoprint: False
# Set to False to hide the SD Card LCD menus.
variable_menu_show_sdcard: True
# Set to clear adjustments (e.g. feedrate, extrusion, heater) at end of print.
variable_start_clear_adjustments_at_end: True
##############
#   SPEEDS   #
##############
# Z travel acceleration in (mm/s^2) for movement macros. 0 To disable.
variable_travel_acceleration_z: 5
# Z travel speed in (mm/m) for movement macros.
variable_travel_speed_z: 600
##############
#    TMC     #
##############
variable_tmc_safe_home_current: 0.330
##############
#    FANS    #
##############
# Fan power at print start. -1 = Ignore command
variable_print_start_fan_power: -1
# Particle filter fan name. "" = Ignore command
variable_print_start_particlefilter_fan_name: ""
# Particle filter fan power at print start. -1 = Ignore command
variable_print_start_particlefilter_fan_power: 1.0
##############
#    PARK    #
##############
# Z position to park toolhead on pause, cancel, end (set "max" to infer from stepper config).
variable_park_z: 50.0
# Z position to park toolhead on M600 (set "max" to infer from stepper config).
variable_m600_park_z: 100
# Z position to park toolhead on print end (set "max" to infer from stepper config).
variable_print_end_park_z: 100
#############
#   BEEPS   #
#############
# Number of beeps to produce when print starts.
variable_print_start_beeps: 1
# Number of beeps to produce when print pauses.
variable_print_pause_beeps: 10
# Number of beeps to produce when print resumes.
variable_print_resume_beeps: 1
# Number of beeps to produce when print ends.
variable_print_end_beeps: 5
##############
#   DELAYS   #
##############
# Delay in milliseconds after starting a print and after homming for plate to stabilize.
variable_print_homming_delay: 5000
# Delay in milliseconds after resuming a paused print for plate to stabilize.
variable_print_resume_delay: 4000
################################################################################
description: Initializes our globals, including any _km_options overrides.
gcode:
  # Doing a shutdown here is a bit aggressive, but if we're missing required
  # sections then a lot of things could go very bad later.
  # To minimize the annoyance we try to identify all the fatal errors at once.
  # format is:
  #   key = required config section
  #   value[0] = required field in section
  #   value[1] = required string in field
  #   A "None" value means there's no required field
  {% set required_sections = {"msla_display" : None,
                              "gcode_macro _km_options" : None,
                              "idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
                              "pause_resume" : None,
                              "respond" : None,
                              "save_variables" : None,
                              "virtual_sdcard" :
                                ("on_error_gcode", "CANCEL_PRINT")
                             } %}
  {% set warn_removed = { } %}
  {% set output = [] %}
  {% for s in required_sections %}
    {% set f = required_sections[s][0] if required_sections[s] else None %}
    {% set v = required_sections[s][1] if required_sections[s] else None %}
    {% if s not in printer.configfile.config %}
      {% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
    {% elif f and
            (v not in printer.configfile.config[s][f]|default("")|upper) %}
      {% set dummy = output.append("Missing %s in %s for [%s] section.\n"
                                   | format(v, f, s)) %}
    {% endif %}
  {% endfor %}
  {% if output %}
    { action_emergency_stop((
        "required printer.cfg section(s) missing:\n"
        ~ output | join("\n")) ~
        "See readme: https://github.com/sn4k3/klipper-msla-macros")
    }
  {% endif %}

  # These are all set to their defaults based on config options:
  
  {% set options = printer["gcode_macro _km_options"] %}
  {% set km = printer["gcode_macro _km_globals"] %}

  # Allow placeholders for parking positions.
  {% if options.park_z|default("")|string|lower == "max" %}
    {% set dummy = options.__setitem__("park_z",
                      printer.configfile.settings.stepper_z.position_max) %}
  {% endif %}
  {% if options.m600_park_z|default("")|string|lower == "max" %}
    {% set dummy = options.__setitem__("m600_park_z",
                      printer.configfile.settings.stepper_z.position_max) %}
  {% endif %}
  {% if options.print_end_park_z|default("")|string|lower == "max" %}
    {% set dummy = options.__setitem__("print_end_park_z",
                      printer.configfile.settings.stepper_z.position_max) %}
  {% endif %}

  # Force overrides to use the original types in _KM_GLOBALS.
  {% for k in options %}
    {% if k not in km %}
      {% if k in warn_removed %}
        {action_respond_info(warn_removed[k])}
      {% else %}
        {% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
                         format(k)) %}
      {% endif %}
    {% elif km[k] is string %}
      SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
        } VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
                             |replace('\"','\\\"')}'"
    {% elif km[k] is float %}
      SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
        } VALUE="{options[k]|float}"
    {% elif km[k] is integer or km[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
    {% elif km[k] is mapping %}
      {% if options[k] is not mapping %}
        {% set dummy = output.append("%s requires a mapping type." |
                         format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
        } VALUE="{options[k]|replace('\"','\\\"')}"
    {% elif km[k] is sequence %}
      {% if options[k] is not sequence %}
        {% set dummy = output.append("%s requires a sequence type." |
                         format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
        } VALUE="{options[k]|replace('\"','\\\"')}"
    {% else %}
      {% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
                        format(k)) %}
    {% endif %}
  {% endfor %}

  SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
    output|replace('\"','\\\"')}"
  M400

[delayed_gcode INIT_GLOBALS]
# This runs once at startup and initializes all macros.
initial_duration: 1
gcode:
  LIST_MACROS SILENT=1 # Build the macro cache.
  _KM_GLOBALS
  # This needs to be its own macro so it gets evaluated after _KM_GLOBALS runs.
  CHECK_KM_CONFIG
  # This is any end-user gcode that need to run after macro initialization.
  _KM_OPTIONS
  _KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors: []
description: Checks global variables and throws an error on any invalid values.
  Does nothing if the config has no errors.
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set toolhead = printer.toolhead %}
  {% set output = load_errors %}
  {% if km.park_z > toolhead.axis_maximum.z or
        km.park_z < toolhead.axis_minimum.z %}
    {% set dummy = output.append("park_z is invalid.") %}
  {% endif %}
  {% if km.m600_park_z > toolhead.axis_maximum.z or
        km.m600_park_z < toolhead.axis_minimum.z %}
    {% set dummy = output.append("m600_park_z is invalid.") %}
  {% endif %}
  {% if km.print_end_park_z > toolhead.axis_maximum.z or
        km.print_end_park_z < toolhead.axis_minimum.z %}
    {% set dummy = output.append("print_end_park_z is invalid.") %}
  {% endif %}

  # Emit all the config errors.
  {% if output %}
    { action_raise_error(output|sort|join('\nError: ')) }
  {% endif %}
  M400

[gcode_macro kmvars]
description: Lists global variables used by klipper-macros.
  Usage: KMVARS [SEARCH=<search_string>]
gcode:
  {% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set output = [] %}
  {% for k in km %}
    {% if SEARCH in k %}
      {% set dummy = output.append(k ~ ": " ~ km[k]) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description: Lists macros lacking proper documentation.
  Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode:
  {% set USAGE = params.USAGE|default(0)|int %}
  {% set HIDDEN = params.HIDDEN|default(0)|int %}
  {% set RENAMED = params.RENAMED|default(0)|int %}
  {% set output = [] %}
  {%set config = printer.configfile.config %}
  {% for k in config|sort %}
    {% if k.startswith("gcode_macro") %}
      {% set name = k.split()[1] %}
      {% set desc = config[k].description|default("") %}
      {% set is_renamed = config[k].rename_existing|default("") %}
      {% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
             (HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
        {% set dummy = output.append("%s&nbsp;%s: missing %s."
           | format("*" if is_renamed else "&nbsp;", name,
                    "description" if not desc else "usage")) %}
      {% endif %}
    {% endif %}
  {% endfor %}
  {action_respond_info(output|join("\n"))}

# The below macro is a lightly edited version of the one found here:
# https://klipper.discourse.group/t/example-search-printer-objects/164
[gcode_macro listvars]
description: Lists per-macro variables with a name containing SEARCH. This is 
  useful for debugging macros by allowing you to probe printer state. Be very
  careful, however, as an overly broad SEARCH parameter can take a long time
  to process and potentially hang or crash klipper.
  Usage: LISTVARS SEARCH=<search_string>
gcode:

  {% if 'SEARCH' not in params and 'S' not in params %}
    { action_raise_error("Must provide a SEARCH parameter.") }
  {% endif %}
  {% set SEARCH = params.SEARCH|default(params.S)|lower %}
  {% set ns = namespace() %}
  {% set output = [] %}
  {% for item in printer %}
    {% if item is not string %}
      {% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
    {% elif ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}
    {% endif %}

    {% if SEARCH in ns.path|lower %}
      {% set dummy = output.append(ns.path|join) %}
    {% endif %}

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
          {% set ns.path = ns.path[:loop.depth|int + 1] %}
          {% if childkey is not string %}
            {% set null = ns.path.append("[%s]" % (childkey|string)) %}
          {% elif ' ' in childkey %}
            {% set null = ns.path.append("['%s']" % (childkey)) %}
          {% else %}
            {% set null = ns.path.append(".%s" % (childkey)) %}
          {% endif %}

          {% if child is mapping  %}
            {loop(child.items())}
          {% else %}
            {% if SEARCH in ns.path|lower %}
              {% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
            {% endif %}
          {% endif %}
        {% endfor %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description: Lists registered macros (and optionally show variable state).
  Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros: {}
gcode:
  # Load the config state once and save it.
  {% if not macros %}
    {% set renames = {} %}
    {% for k in printer.configfile.config %}
      {% if k.lower().startswith("gcode_macro") and
            printer.configfile.config[k].rename_existing %}
          {% set name = k.split(None, 1)[1] | lower %}
          {% set dummy = renames.__setitem__(name,
                          [printer.configfile.config[k].rename_existing|lower] +
                            renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
    {% for k in printer %}
      {% if k.lower().startswith("gcode_macro") %}
        {% set name = k.split(None, 1)[1] | lower %}
        {% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if params.SILENT|default(0)|int == 0 %}
    _LIST_MACROS_DISPLAY {rawparams}
  {% endif %}

[gcode_macro _list_macros_display]
gcode:
  {% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
  {% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}

  {% set macros = printer["gcode_macro list_macros"].macros %}
  {% set output = [] %}
  {% for k in macros %}
    {% if SEARCH in k | lower %}
      {% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
                          else "") %}
      {% set outvars = [] %}
      {% if VARS %}
        {% for v in printer["gcode_macro " ~ k] | sort %}
          {% set dummy = outvars.append("\n* %s: %s" %
                           (v, printer["gcode_macro " ~ k][v]|string)) %}
        {% endfor %}
      {% endif %}
      {% set dummy = output.append(line + outvars | join("")) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output | sort | join("\n")) }